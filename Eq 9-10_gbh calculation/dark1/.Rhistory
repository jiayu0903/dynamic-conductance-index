#%within%
# Find the intersection of intervals
intersection <- intersect(int1, int2)
intersection
intersected_dates <- series_zoo[index(series_zoo) %within% intersection]
intersected_dates
window_interval <- window(series_zoo,
start = as.Date("2020-03-01"),
end = as.Date("2020-03-10"))
window_interval
x <- as.POSIXct("2022-02-17 12:15:21")
x
x_days_floor <- floor_date(x,"days")
x_days_floor
# lets say we only want to know what day class is on
x_days_floor <- floor_date(x,"hours")
x_days_floor
# lets say we only want to know what day class is on
x_days_floor <- floor_date(x,"months")
x_days_floor
x_days_ceiling <- ceiling_date(x, "days")
x_days_ceiling
x_days_ceiling <- ceiling_date(x, "months")
x_days_ceiling
# lets say we only want to know what day class is on
x_days_floor <- floor_date(x,"months")
x_days_floor
round_date(x, unit = "hour")
transaction_dates <- c("2022-01-05", "2022-01-10", "2022-03-20", "2022-04-25", "2022-04-15","2023-04-15","2023-04-15")
amounts <- c(100, 150, 200, 120, 180, 90, 110)
transactions_df <- data.frame(Date = as.Date(transaction_dates), Amount = amounts)
View(transactions_df)
transactions_df$Month_Start <- floor_date(transactions_df$Date, unit = "month"
)
View(transactions_df)
aggregate_amounts <- aggregate(transactions_df$Amount, by = list(transactions_df$Month_Start), FUN = sum)
View(aggregate_amounts)
transactions_df$Year_end <- ceiling_date(transactions_df$Date, unit = "year")
aggregate_amounts_year <- aggregate(transactions_df$Amount, by = list(transactions_df$Year_end), FUN = sum)
aggregate_amounts_year
transactions_df$Year_end <- round_date(transactions_df$Date, unit = "year")
aggregate_amounts_year <- aggregate(transactions_df$Amount, by = list(transactions_df$Year_end), FUN = sum)
aggregate_amounts_year
# previously created object 'seres_zoo' will be used
head(series_zoo)
# Introduce missing values (replace some values with NA)
set.seed(123)  # For reproducibility
series_zoo[sample(1:length(series_zoo), 20)] <- NA # introduce NA values for some rows
series_zoo
# Removing Missing Values
cleaned_data <- na.omit(series_zoo) # remove rows with NA
sum(is.na(cleaned_data))
# Removing Missing Values
cleaned_data <- na.omit(series_zoo) # remove rows with NA
mean_refill <- na.aggregate(series_zoo, by =1,  FUN = mean)
mean_refill
mean(series_zoo[,5])
mean(series_zoo[,5], na.rm=TRUE)
series_zoo
mean(window(series_zoo,
start="2020-01-01",
end="2020-01-01")[0,5])
mean_refill_calendarmonths <- na.aggregate(series_zoo, by = months, FUN = mean) # mean of the month over all years
mean_refill_calendarmonths[days==13 & years == 2020 & months == 1]
coredata(series_zoo)
data_frame_series <- data.frame(Date=as.POSIXct(inedx(series_zoo)),
coredata(series_zoo))
str(data_frame_series)
#let's check it
data_frame_series <- data.frame(Date=as.POSIXct(index(series_zoo)),
coredata(series_zoo))
str(data_frame_series)
data_frame_series %>% group_by(month(Date))%>%
# linear interpolation between the two neighboring values
interpolated_zoo<- na.fill(series_zoo, "extend") # the last known value is used to fill the NA
library(dplyr)
data_frame_series %>% group_by(month=month(Date))%>%
# linear interpolation between the two neighboring values
interpolated_zoo<- na.fill(series_zoo, "extend") # the last known value is used to fill the NA
tail(series_zoo)
# merging zoo objects
head(zoo_object)
library(dplyr)
data_frame_series %>% group_by(month=month(Date))%>%
data_frame_series %>% group_by(month=month(Date))%>%
# linear interpolation between the two neighboring values
interpolated_zoo<- na.fill(series_zoo, "extend") # the last known value is used to fill the NA
zoo_object
# merging zoo objects
head(zoo_object)
tail(series_zoo)
merged_zoo <- merge(zoo_object, series_zoo, all=TRUE)
# merging zoo objects
head(zoo_object)
tail(series_zoo)
merged_zoo <- merge(zoo_object, series_zoo, all=TRUE)
tail(merged_zoo)
zoo_object
merged_zoo <- merge(as.Date(zoo_object), series_zoo, all=TRUE)
#DIY
max_refill <- na.aggregate(series_zoo, by = max(months),  FUN = mean) # overall mean is used
max_refill
#DIY
max_refill <- na.aggregate(series_zoo, by = years,  FUN = max) # overall mean is used
#DIY
max_refill <- na.aggregate(series_zoo, by = years,  FUN = mean) # overall mean is used
mean_refill[days==13 & years == 2020 & months == 1]
#DIY
max_refill <- na.aggregate(series_zoo, by = years,  FUN = max) # overall mean is used
mean_refill[days==13 & years == 2020 & months == 1]
#DIY
max_refill <- na.aggregate(series_zoo, by = max(years),  FUN = mean) # overall mean is used
mean_refill[days==13 & years == 2020 & months == 1]
mean_refill <- na.aggregate(series_zoo, by =1,  FUN = mean) # overall mean is used
mean_refill[days==13 & years == 2020 & months == 1]
mean(series_zoo[,5])
#DIY
max_refill <- na.aggregate(series_zoo, by = year(series_zoo),  FUN = max) # overall mean is used
max_refill[days==13 & years == 2020 & months == 1]
monthly_means <- aggregate(series_zoo, as.yearmon, mean,na.rm=TRUE)
monthly_means
# on quarter level
quarter_means <- aggregate(zoo_object, as.yearqtr, mean)
quarter_means
# on selected interval
rolling_mean <- rollmean(series_zoo, k = 4, fill = "extend", align = "center") # k -interval window
head(rolling_mean)
# on selected interval
rolling_mean <- rollmean(series_zoo, k = 5, fill = "extend", align = "center") # k -interval window
# Calculation of difference between intervals
mean_diff <- diff(rolling_mean)
head(mean_diff)
shifted_series <- lag(series_zoo,1)
shifted_series
plot(series_zoo_interpolated,plot.type = 'single',
col = list (Value1=2, Value2 = 3, Value4 = 4))
applu(irie[,1:4], MARGIN=2,FUN=range)
apply(irie[,1:4], MARGIN=2,FUN=range)
apply(iris[,1:4], MARGIN=2,FUN=range)
head(airquality)
apply(airquality, MARGIN=2,mean,na.rm=TRUE)
apply(iris[,1:4], MARGIN=2,FUN=range)
apply(iris[,1:4], MARGIN=2,FUN=mean
apply(iris[,1:4], MARGIN=2,FUN=mean)
apply(iris[,1:4], MARGIN=2,FUN = mean)
apply(iris, MARGIN=2,FUN = mean)
as.matrix(iris)
#lapply()
iris
new_iris <- list(species =iris$Species)
View(new_iris)
new_iris <- list(setosa =iris[1:50,])
new_iris <- list(setosa =iris[1:50,],ver =iris[51:100,],virginica =iris[101:150,])
names(new_iris) <- iris_split
names(new_iris) <- "iris_split"
iris_split <- names(new_iris)
iris_split <- new_iris
lapply(iris_split,sum)
lapply(iris_split,FUN = sum)
lapply(iris_split,FUN = summary)
iris_split <- list(setosa =iris[1:50,],ver =iris[51:100,],virginica =iris[101:150,])
lapply(iris_split,FUN = summary,na.rm=TRUE)
iris_split <- list(setosa = iris[iris$Species == "setosa",],
versicolor = iris[iris$Species == "versicolor",],
virginica = iris[iris$Species == "virginica",])
iris$Species
iris[iris$Species == "setosa",]
iris_split <- split(iris,f=iris$Species)
iris_split
iris[,"Speal.Length"]
iris[,"Sepal.Length"]
lapply(iris_split,'[',"Sepal.Length")
iris["Sepal.Length"]
iris[,"Sepal.Length"]
function(x) summary(x)
lapply(iris_split,\(x) summary(x))
#
mtcars
split_car <- split(mtcars, f=mtcars$cyl)
lapply(split_car,function(x) lm(data=x, formula = mpg~hp))
lapply(split_car,function(x) lm(data=x, formula = mpg~hp) summary(x))
new_data <- lapply(split_car,function(x) lm(data=x, formula = mpg~hp))
summary(new_data[[1]])
DD <- lapply(nwe_data, summary)
DD <- lapply(new_data, summary)
lapply(summaries,'[[',"r.squared")
lapply(DD,'[[',"r.squared")
lapply(DD,'[',"r.squared")
par(mfrow=c(2,2))
lapply(iris_split,plot)
par(mfrow = c(3,1))
lapply(iris_split, function(x) plot(
x = x$Sepal.Length, y = x$Sepal.Width,
main = list("setosa", "versicolor", "virginica")))
tapply(x=iris$Sepal.Length,INDEX=iris$Species,FUN=mean, na.rm=TRUE)
tapply(X=iris$Sepal.Length,INDEX=iris$Species,FUN=mean, na.rm=TRUE)
#map
library(repurrrsive)
library(tidyverse)
library(repurrrsive)
install.package(repurrrsive)
install.packages(repurrrsive)
install.packages("repurrrsive")
library(repurrrsive)
map(iris,mean,na.rm=TRUE)
map_chr(iris,mean,na.rm=TRUE)
iris %>% split(f=.Species)
iris %>% split(f.=.Species) %>%
iris %>% split(f.=.Species)
iris %>% split(f=.$Species) %>%
map(~lm(data=.x,Sepal.Length~Sepal.Width))
new_data <- map(~lm(data=.x,Sepal.Length~Sepal.Width))
iris %>% split(f=.$Species) %>%
map(~lm(data=.x,Sepal.Length~Sepal.Width))
map("r.squared")
iris %>% split(f=.$Species) %>%
map(~lm(data=.x,Sepal.Length~Sepal.Width))
got_chars
map(got_chars[1:3],"name")
map(got_chars[1:3],3)
got_chars[[1]][c("name","books","spouse")]
map(got_chars[1:5],'[',c("name","gender"))
PD <- 15/ (23 * 0.000001) # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.0035 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
PD <- 15/ (23 * 0.000001) # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.0035 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
PD <- 15/ (23 * 0.000001) # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.0035 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
PD <- 0.6569/  0.000001 # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.005238 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
gpw_1
gpw_2
gpw_3
PD <- 0.72055/  0.000001 # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.007672 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
gpw_1
gpw_2
gpw_3
PD <- 1.1198/  0.000001 # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.00553 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
gpw_1
gpw_2
gpw_3
PD <- 1.24658/  0.000001 # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.006367 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
gpw_1
gpw_2
gpw_3
#M
PD <- 1.162/  0.000001 # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.00577 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
gpw_1
gpw_2
gpw_3
PD <- 0.76569/  0.000001
D <- 24.9 * 10** -6  # m2s-1
a <- 0.005238 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
PD <- 0.6569/  0.000001
D <- 24.9 * 10** -6  # m2s-1
a <- 0.005238 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
PD <- 0.6569/  0.000001
D <- 24.9 * 10** -6  # m2s-1
a <- 0.006238 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
PD <- 0.72055/  0.000001 # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.008672 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
gpw_1
gpw_2
gpw_3
#S2
PD <- 1.1198/  0.000001 # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.00653 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
gpw_1
gpw_2
gpw_3
PD <- 1.24658/  0.000001 # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.007367 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
gpw_1
gpw_2
gpw_3
#M
PD <- 1.162/  0.000001 # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.00677 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
gpw_1
gpw_2
gpw_3
#B3
PD <- 1.515/  0.000001 # m-2
D <- 24.9 * 10** -6  # m2s-1
a <- 0.00641 * 0.000001 # m2
V <- 24.4 * 10 **-3 #m3 mol-1
l <- 0.0515 * 0.000001 #m
n_1 <-  pi/4
n_2 <-  pi/2
n_3 <- 1
gpw_1 <- (PD*D*a)/ (V*(l+ n_1 *sqrt(a/pi)))
gpw_2 <- (PD*D*a)/ (V*(l+ n_2 *sqrt(a/pi)))
gpw_3 <- (PD*D*a)/ (V*(l+ n_3 *sqrt(a/pi)))
gpw_1
gpw_2
gpw_3
setwd("D:/1Rmodel/WP3/240225-gbh calculation/dark1")
library(ggplot2)
library(cowplot)
library(readxl)
library(simET)
# Directory of the data
dr <- "./data/"
date <- "2024-02-24"
time <- "11:30:00"
t0 <- as.POSIXct(paste(date, time), format="%Y-%m-%d %H:%M:%OS")
# Read and process Leaf temperature data
dL <- read.csv(paste0(dr, "LeafT.csv"))
names(dL) <- c("Date", "Time",	"Reflect","Black","Wet")
# Read and process environment data
dE <- read.csv(paste0(dr, "Envir.csv"))
dE$time <- as.POSIXct(paste(date, dE$Time), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dE, aes(x=time, y=Temperature)) + geom_point()
ggplot(dE, aes(x=time, y=Humidity)) + geom_point()
dE2 <- read.csv(paste0(dr, "Envir-wet.csv"))
dE2$time <- as.POSIXct((dE2$Date.Time),  format="%Y-%m-%dT%H:%M:%OS")
#Convert to numeric data
dE$time <- as.numeric(dE$time - t0)
dE2$time <- as.numeric(dE2$time - t0)
dL$time <- as.numeric(dL$Time)
# Use splines to extract data at common time points
spl_A <- splinefun(dE$time, dE$Temperature)
spl_R <- splinefun(dE$time, dE$Humidity)
spl_AW <- splinefun(dE2$time, dE2$Tair.wet)
spl_RW <- splinefun(dE2$time, dE2$RH.wet)
fitt <- smooth.spline(dE$time, dE$Temperature, cv=TRUE)
fitt2 <- smooth.spline(dE$time, dE$Humidity, cv=TRUE)
fitt3 <- smooth.spline(dE2$time, dE2$Tair.wet, cv=TRUE)
fitt4 <- smooth.spline(dE2$time, dE2$RH.wet, cv=TRUE)
fitt$df
fitt2$df
fitt3$df
fitt4$df
# Remove high frequency fluctuations
sspl_A <- smooth.spline(dE$time, dE$Temperature, df=20)
sspl_R <- smooth.spline(dE$time, dE$Humidity, df=93)
sspl_AW <- smooth.spline(dE2$time, dE2$Tair.wet, df=198)
sspl_RW <- smooth.spline(dE2$time, dE2$RH.wet, df=200)
time <- dL$time
# Merge the data sets
d <- data.frame(time=dL$time, Tair=predict(sspl_A, time)$y,
Tair.wet=predict(sspl_AW, time)$y,
RH=predict(sspl_R, time)$y,
RH.wet=predict(sspl_RW, time)$y)
# Dry&Wet reference temperature and environment data (adjust by real environment data)
Twet <- dL$Wet[12000:18000]
Tdry <- dL$Black[12000:18000]
Treflect <- dL$Reflect[12000:18000]
Tair <-d$Tair.wet[12000:18000]
RH <- (d$RH.wet/100)[12000:18000]
#plot test
#plot(x=time, y= Twet)
# Known parameters
Pa <- 101300
R <- 8.3145
E <- 1.34254E-05  # kg m-2 s-1
#VPD
ea <- 613.65 * exp(17.502 * Tair / (240.97 + Tair)) * RH
es <- 613.65 * exp(17.502 * Twet / (240.97 + Twet))
SH <- 0.622 * ea / (Pa - ea)
Cs <- 1005 + 1820 * SH
rho <- Pa / (287.058 * (Tair+273))
lambda <- 1.91846E6 * ((Twet+273) / (Twet+273 - 33.91))**2
# steady-status
emissBT <- 0.97 # emissivity of the black tape
emissR <- 0.95 # emissivity of the filter paper
# steady-status
gbh_numerator_steady <- Tdry-Twet -(emissBT *5.6703E-8*((Twet+273)**4-(Tdry+273)**4)+emissR *5.6703E-8*((Twet+273)**4-(Tdry+273)**4))
gbh_denominator_steady <- 2*rho*Cs*(Twet-Tdry)+lambda*0.018*(es-ea)/(0.92*R*(Twet+273))
gbh <- gbh_numerator_steady/gbh_denominator_steady # unit  m s-1
gbw <- (Pa/(0.92*R*(Twet+273))) * gbh # mol m-2 s-1 one sided
# gsw from transpiration rate
gtw <- E / (0.018*((es-ea)/Pa))
gsw <- (gtw*gbw) / (gbw-gtw)
#plot(x=time,y=Twet)
mean(gsw)
