if (i %% 3 == 0) {
print(paste(i, "is divisible by 3"))
}
}
s <- 3
for (i in 1:10) {
if (i %% 2 ==0){
print(i)
}
}
numb <- c(1:10)
for (i in seq_along(numb)) {
print(numb[i])
}
for (i in 1:20) {
if (i %% 3 == 0) {
print(paste(i, "is divisible by 3"))
}
}
for (i in 1:20) {
if (i %% 3 ==0){
print(paste("i","divisibe by 3"))
}
}
for (i in 1:5) {
for (j in 6:10) {
print(paste("product of",i,"and",j,":",i*j))
}
}
for (i in 1:5) {
for (j in 6:10) {
print(paste("product of",i,"and",j,"=",i*j))
}
}
#7
random <- runif(100)
random <- runif(100)
for (i in seq_along(random)) {
if(random[i]>1&random[i]<33)
print(paste(i,"is Low"))
}
random
set.seed(123)
set.seed(123)
random <- runif(100)
random <- runif(100)
set.seed(123)
random <- runif(100)
random <- runif(100)
set.seed(123)
random <- runif(100)
random <- sample(1:100,100)
for (i in seq_along(random)) {
if(random[i]>1 & random[i]<33)
print(paste(i,"is Low"))
}
for (num in random) {
ifelse(num <= 33, "Low", ifelse(num <= 66, "Medium", "High"))
print("dd")
}
for (num in random) {
dd <- ifelse(num <= 33, "Low","High")
print(paste(dd,"is",num))
}
ID <- c(1:10)
DD <- data.frame(ID,scores)
nrow(DD)
View(DD)
ncol(DD)
for (i in 1:nrow(DD)) {
status <- ifelse(DD$scores[i]>50, "passed","failded")
print(paste("ID:",DD$ID[i],status))
}
# load necessary packages for the section
library(xts)
library(zoo)
library(timeSeries)
library(lubridate)
date_strings <- c("01-12-2023", "2023-02-15", "20/03/23", "03-20-2023")
# Using strptime() for conversion with specified formats
converted_dates <- strptime(date_strings, format = c("%d-%m-%Y", "%Y-%m-%d", "%d/%m/%y", "%m-%d-%Y"))
formatted_dates <- format(converted_dates, format = "%d-%m-%Y %H:%M:%S")
formatted_dates
char_date <- "2023-12-31"
date_output <- as.Date(char_date)
posixct_output <- as.POSIXct(char_datetime)
char_datetime <- "2023-12-31 23:59:59"
# Conversion using as.POSIXct()
posixct_output <- as.POSIXct(char_datetime)
# Conversion using as.POSIXlt()
posixlt_output <- as.POSIXlt(char_datetime)
time_index <- seq(as.Date("2023-01-01"), by = "month", length.out = 10)
str(time_index)
data_values <- rnorm(10)
ts_object <- ts(data_values, start = c(2023, 1), frequency = 12) # here we don't even use the time_index
print(ts_object) # dates are not part of the object
xts_object <- xts(data_values, order.by = time_index)
rownames(xts_object)# this doesn't show the dates, although it looks like it is in the rownames
index(xts_object) # to access the dates of xts_object
View(xts_object)
zoo_object <- zoo(data_values, order.by = time_index)
index(zoo_object) # to acccess the dates
sample_data_frame <- data.frame(
DateTime = c("2023-01-01 12:00:00", "2023-01-02 10:30:00", "2023-01-03 08:45:00"),
Value = c(25, 30, 35)
)
View(sample_data_frame)
sample_zoo <- zoo(sample_data_frame, order.by = sample_data_frame$DateTime)
print(sample_zoo)
index(sample_zoo)
date_df <- data.frame(
DateStrings = c("2021-01-01", "15/02/2021", "03-20-2021 12:45:00", "2021/04/25", "06-20-21"),
Value = c(10, 15, 20, 25, 30)
)
# Converting Data frame to zoo object using the corrected Date column
zoo_object <- zoo(date_df$Value, order.by = date_df$Date)
zoo_object
series_data <- data.frame(
Date = seq(as.Date("2020-01-01"), by = "day", length.out = 500),
Value1 = rnorm(50),
Value2 = runif(50),
Value3 = sample(50:100, 50, replace = TRUE),
Value4 = rpois(50, lambda = 2),
Value5 = rnorm(50, mean = 10, sd = 3)
)
str(series_data)
# Convert Date column to 'Date' class
series_data$Date <- as.Date(series_data$Date)
str(series_data)
# Convert DataFrame to a zoo object (time series)
series_zoo <- zoo(series_data, order.by = series_data$Date)
library(zoo)
# Convert DataFrame to a zoo object (time series)
series_zoo <- zoo(series_data, order.by = series_data$Date)
str(series_zoo)
head(series_zoo)
# Convert DataFrame to a zoo object (time series)
series_zoo <- zoo(series_data[,-1], order.by = series_data$Date)
head(series_zoo)
ymd_object <- ymd(c("2020-31-01","2023-05-06"))
# load necessary packages for the section
library(xts)
library(zoo)
library(timeSeries)
library(lubridate)
ymd_object <- ymd(c("2020-31-01","2023-05-06"))
ymd_object <- ydm(c("2020-31-01","2023-05-06"))
ymd_hours <- ymd_hms("2022-01-31 12:12:05")
ymd_hours <- ymd_hms("2022-01-31 12:12:05",tz="CET")
ymd_hours <- ymd_hms("98-01-31 12:12:05",tz="CET")
index(series_zoo
)
months <- month(index(series_zoo))
months
days <- day(index(series_zoo))
series_zoo
specific_year <- series_zoo[year(series_zoo)==2021]
years <- year(index(series_zoo))
years <- year(series_zoo)
years <- year(index(series_zoo))
years <- year(series_zoo)
specific_day_month_year <- series_zoo[days==3 & years == 2021 & months == 5]
specific_day_month_year
specific_day_month_year <- series_zoo[days==31 & years == 2021 & months == 5]
specific_day_month_year
int1 <- interval(ymd("2020-03-15"), ymd("2020-06-15"))
int1
int1 <- interval(ymd("2020-03-15"), ymd("2020-06-15"), tz="CET")
int1
within_int1 <- series_zoo[index(series_zoo) %within% int1]
within_int1
index(series_zoo)
intersection <- intersect(int1, int2)
int2 <- interval(ymd("2020-06-10"), ymd("2020-10-10"))
#%within%
# Find the intersection of intervals
intersection <- intersect(int1, int2)
intersection
intersected_dates <- series_zoo[index(series_zoo) %within% intersection]
intersected_dates
window_interval <- window(series_zoo,
start = as.Date("2020-03-01"),
end = as.Date("2020-03-10"))
window_interval
x <- as.POSIXct("2022-02-17 12:15:21")
x
x_days_floor <- floor_date(x,"days")
x_days_floor
# lets say we only want to know what day class is on
x_days_floor <- floor_date(x,"hours")
x_days_floor
# lets say we only want to know what day class is on
x_days_floor <- floor_date(x,"months")
x_days_floor
x_days_ceiling <- ceiling_date(x, "days")
x_days_ceiling
x_days_ceiling <- ceiling_date(x, "months")
x_days_ceiling
# lets say we only want to know what day class is on
x_days_floor <- floor_date(x,"months")
x_days_floor
round_date(x, unit = "hour")
transaction_dates <- c("2022-01-05", "2022-01-10", "2022-03-20", "2022-04-25", "2022-04-15","2023-04-15","2023-04-15")
amounts <- c(100, 150, 200, 120, 180, 90, 110)
transactions_df <- data.frame(Date = as.Date(transaction_dates), Amount = amounts)
View(transactions_df)
transactions_df$Month_Start <- floor_date(transactions_df$Date, unit = "month"
)
View(transactions_df)
aggregate_amounts <- aggregate(transactions_df$Amount, by = list(transactions_df$Month_Start), FUN = sum)
View(aggregate_amounts)
transactions_df$Year_end <- ceiling_date(transactions_df$Date, unit = "year")
aggregate_amounts_year <- aggregate(transactions_df$Amount, by = list(transactions_df$Year_end), FUN = sum)
aggregate_amounts_year
transactions_df$Year_end <- round_date(transactions_df$Date, unit = "year")
aggregate_amounts_year <- aggregate(transactions_df$Amount, by = list(transactions_df$Year_end), FUN = sum)
aggregate_amounts_year
# previously created object 'seres_zoo' will be used
head(series_zoo)
# Introduce missing values (replace some values with NA)
set.seed(123)  # For reproducibility
series_zoo[sample(1:length(series_zoo), 20)] <- NA # introduce NA values for some rows
series_zoo
# Removing Missing Values
cleaned_data <- na.omit(series_zoo) # remove rows with NA
sum(is.na(cleaned_data))
# Removing Missing Values
cleaned_data <- na.omit(series_zoo) # remove rows with NA
mean_refill <- na.aggregate(series_zoo, by =1,  FUN = mean)
mean_refill
mean(series_zoo[,5])
mean(series_zoo[,5], na.rm=TRUE)
series_zoo
mean(window(series_zoo,
start="2020-01-01",
end="2020-01-01")[0,5])
mean_refill_calendarmonths <- na.aggregate(series_zoo, by = months, FUN = mean) # mean of the month over all years
mean_refill_calendarmonths[days==13 & years == 2020 & months == 1]
coredata(series_zoo)
data_frame_series <- data.frame(Date=as.POSIXct(inedx(series_zoo)),
coredata(series_zoo))
str(data_frame_series)
#let's check it
data_frame_series <- data.frame(Date=as.POSIXct(index(series_zoo)),
coredata(series_zoo))
str(data_frame_series)
data_frame_series %>% group_by(month(Date))%>%
# linear interpolation between the two neighboring values
interpolated_zoo<- na.fill(series_zoo, "extend") # the last known value is used to fill the NA
library(dplyr)
data_frame_series %>% group_by(month=month(Date))%>%
# linear interpolation between the two neighboring values
interpolated_zoo<- na.fill(series_zoo, "extend") # the last known value is used to fill the NA
tail(series_zoo)
# merging zoo objects
head(zoo_object)
library(dplyr)
data_frame_series %>% group_by(month=month(Date))%>%
data_frame_series %>% group_by(month=month(Date))%>%
# linear interpolation between the two neighboring values
interpolated_zoo<- na.fill(series_zoo, "extend") # the last known value is used to fill the NA
zoo_object
# merging zoo objects
head(zoo_object)
tail(series_zoo)
merged_zoo <- merge(zoo_object, series_zoo, all=TRUE)
# merging zoo objects
head(zoo_object)
tail(series_zoo)
merged_zoo <- merge(zoo_object, series_zoo, all=TRUE)
tail(merged_zoo)
zoo_object
merged_zoo <- merge(as.Date(zoo_object), series_zoo, all=TRUE)
#DIY
max_refill <- na.aggregate(series_zoo, by = max(months),  FUN = mean) # overall mean is used
max_refill
#DIY
max_refill <- na.aggregate(series_zoo, by = years,  FUN = max) # overall mean is used
#DIY
max_refill <- na.aggregate(series_zoo, by = years,  FUN = mean) # overall mean is used
mean_refill[days==13 & years == 2020 & months == 1]
#DIY
max_refill <- na.aggregate(series_zoo, by = years,  FUN = max) # overall mean is used
mean_refill[days==13 & years == 2020 & months == 1]
#DIY
max_refill <- na.aggregate(series_zoo, by = max(years),  FUN = mean) # overall mean is used
mean_refill[days==13 & years == 2020 & months == 1]
mean_refill <- na.aggregate(series_zoo, by =1,  FUN = mean) # overall mean is used
mean_refill[days==13 & years == 2020 & months == 1]
mean(series_zoo[,5])
#DIY
max_refill <- na.aggregate(series_zoo, by = year(series_zoo),  FUN = max) # overall mean is used
max_refill[days==13 & years == 2020 & months == 1]
monthly_means <- aggregate(series_zoo, as.yearmon, mean,na.rm=TRUE)
monthly_means
# on quarter level
quarter_means <- aggregate(zoo_object, as.yearqtr, mean)
quarter_means
# on selected interval
rolling_mean <- rollmean(series_zoo, k = 4, fill = "extend", align = "center") # k -interval window
head(rolling_mean)
# on selected interval
rolling_mean <- rollmean(series_zoo, k = 5, fill = "extend", align = "center") # k -interval window
# Calculation of difference between intervals
mean_diff <- diff(rolling_mean)
head(mean_diff)
shifted_series <- lag(series_zoo,1)
shifted_series
plot(series_zoo_interpolated,plot.type = 'single',
col = list (Value1=2, Value2 = 3, Value4 = 4))
applu(irie[,1:4], MARGIN=2,FUN=range)
apply(irie[,1:4], MARGIN=2,FUN=range)
apply(iris[,1:4], MARGIN=2,FUN=range)
head(airquality)
apply(airquality, MARGIN=2,mean,na.rm=TRUE)
apply(iris[,1:4], MARGIN=2,FUN=range)
apply(iris[,1:4], MARGIN=2,FUN=mean
apply(iris[,1:4], MARGIN=2,FUN=mean)
apply(iris[,1:4], MARGIN=2,FUN = mean)
apply(iris, MARGIN=2,FUN = mean)
as.matrix(iris)
#lapply()
iris
new_iris <- list(species =iris$Species)
View(new_iris)
new_iris <- list(setosa =iris[1:50,])
new_iris <- list(setosa =iris[1:50,],ver =iris[51:100,],virginica =iris[101:150,])
names(new_iris) <- iris_split
names(new_iris) <- "iris_split"
iris_split <- names(new_iris)
iris_split <- new_iris
lapply(iris_split,sum)
lapply(iris_split,FUN = sum)
lapply(iris_split,FUN = summary)
iris_split <- list(setosa =iris[1:50,],ver =iris[51:100,],virginica =iris[101:150,])
lapply(iris_split,FUN = summary,na.rm=TRUE)
iris_split <- list(setosa = iris[iris$Species == "setosa",],
versicolor = iris[iris$Species == "versicolor",],
virginica = iris[iris$Species == "virginica",])
iris$Species
iris[iris$Species == "setosa",]
iris_split <- split(iris,f=iris$Species)
iris_split
iris[,"Speal.Length"]
iris[,"Sepal.Length"]
lapply(iris_split,'[',"Sepal.Length")
iris["Sepal.Length"]
iris[,"Sepal.Length"]
function(x) summary(x)
lapply(iris_split,\(x) summary(x))
#
mtcars
split_car <- split(mtcars, f=mtcars$cyl)
lapply(split_car,function(x) lm(data=x, formula = mpg~hp))
lapply(split_car,function(x) lm(data=x, formula = mpg~hp) summary(x))
new_data <- lapply(split_car,function(x) lm(data=x, formula = mpg~hp))
summary(new_data[[1]])
DD <- lapply(nwe_data, summary)
DD <- lapply(new_data, summary)
lapply(summaries,'[[',"r.squared")
lapply(DD,'[[',"r.squared")
lapply(DD,'[',"r.squared")
par(mfrow=c(2,2))
lapply(iris_split,plot)
par(mfrow = c(3,1))
lapply(iris_split, function(x) plot(
x = x$Sepal.Length, y = x$Sepal.Width,
main = list("setosa", "versicolor", "virginica")))
tapply(x=iris$Sepal.Length,INDEX=iris$Species,FUN=mean, na.rm=TRUE)
tapply(X=iris$Sepal.Length,INDEX=iris$Species,FUN=mean, na.rm=TRUE)
#map
library(repurrrsive)
library(tidyverse)
library(repurrrsive)
install.package(repurrrsive)
install.packages(repurrrsive)
install.packages("repurrrsive")
library(repurrrsive)
map(iris,mean,na.rm=TRUE)
map_chr(iris,mean,na.rm=TRUE)
iris %>% split(f=.Species)
iris %>% split(f.=.Species) %>%
iris %>% split(f.=.Species)
iris %>% split(f=.$Species) %>%
map(~lm(data=.x,Sepal.Length~Sepal.Width))
new_data <- map(~lm(data=.x,Sepal.Length~Sepal.Width))
iris %>% split(f=.$Species) %>%
map(~lm(data=.x,Sepal.Length~Sepal.Width))
map("r.squared")
iris %>% split(f=.$Species) %>%
map(~lm(data=.x,Sepal.Length~Sepal.Width))
got_chars
map(got_chars[1:3],"name")
map(got_chars[1:3],3)
got_chars[[1]][c("name","books","spouse")]
map(got_chars[1:5],'[',c("name","gender"))
setwd("D:/1Rmodel/WP3/231219-onetail-validation")
library(ggplot2)
library(cowplot)
library(readxl)
library(simET)
# Directory of the data
dr <- "./data/"
date <- "2023-12-19"
time <- "15:29:00"
t0 <- as.POSIXct(paste(date, time), format="%Y-%m-%d %H:%M:%OS")
# Read and process Leaf temperature data
dL <- read.csv(paste0(dr, "LeafT.csv"))
names(dL) <- c("Date", "Time",	"Reflect","Black","Wet")
# Read and process environment data
dE <- read.csv(paste0(dr, "Envir.csv"))
dE$time <- as.POSIXct(paste(date, dE$Time), format="%Y-%m-%d %I:%M:%OS %p")
ggplot(dE, aes(x=time, y=Temperature)) + geom_point()
ggplot(dE, aes(x=time, y=Humidity)) + geom_point()
dE2 <- read.csv(paste0(dr, "Envir-wet.csv"))
dE2$time <- as.POSIXct((dE2$Date.Time),  format="%Y-%m-%dT%H:%M:%OS")
#Convert to numeric data
dE$time <- as.numeric(dE$time - t0)
dE2$time <- as.numeric(dE2$time - t0)
dL$time <- as.numeric(dL$Time)
# Use splines to extract data at common time points
spl_A <- splinefun(dE$time, dE$Temperature)
spl_R <- splinefun(dE$time, dE$Humidity)
spl_AW <- splinefun(dE2$time, dE2$Tair.wet)
spl_RW <- splinefun(dE2$time, dE2$RH.wet)
fitt <- smooth.spline(dE$time, dE$Temperature, cv=TRUE)
fitt2 <- smooth.spline(dE$time, dE$Humidity, cv=TRUE)
fitt3 <- smooth.spline(dE2$time, dE2$Tair.wet, cv=TRUE)
fitt4 <- smooth.spline(dE2$time, dE2$RH.wet, cv=TRUE)
fitt$df
fitt2$df
fitt3$df
fitt4$df
# Remove high frequency fluctuations
sspl_A <- smooth.spline(dE$time, dE$Temperature, df=30)
sspl_R <- smooth.spline(dE$time, dE$Humidity, df=55)
sspl_AW <- smooth.spline(dE2$time, dE2$Tair.wet, df=195)
sspl_RW <- smooth.spline(dE2$time, dE2$RH.wet, df=188)
time <- dL$time
# Merge the data sets
d <- data.frame(time=dL$time, Tair=predict(sspl_A, time)$y,
Tair.wet=predict(sspl_AW, time)$y,
RH=predict(sspl_R, time)$y,
RH.wet=predict(sspl_RW, time)$y)
# Dry&Wet reference temperature and environment data (adjust by real environment data)
Twet <- dL$Wet[6000:12000]
Tdry <- dL$Black[6000:12000]
Treflect <- dL$Reflect[6000:12000]
Tair <-d$Tair[6000:12000]
RH <- (d$RH/100)[6000:12000]
#plot test
#plot(x=time, y= Tdry-Twet)
# Known parameters
Pa <- 101300
R <- 8.3145
E <- 0.00012 # kg m-2 s-1
#VPD
ea <- 613.65 * exp(17.502 * Tair / (240.97 + Tair)) * RH
es <- 613.65 * exp(17.502 * Twet / (240.97 + Twet))
SH <- 0.622 * ea / (Pa - ea)
Cs <- 1005 + 1820 * SH
rho <- Pa / (287.058 * (Tair+273))
lambda <- 1.91846E6 * ((Twet+273) / (Twet+273 - 33.91))**2
# wet reference from balance
gbh <- E / (0.018*(es-ea)/(0.92*R*(Twet+273))) # unit  m s-1
rbh <- 1 / gbh  # m s-1 one sided
#plot(x=time,y=gbh)
mean(gbh)
mean(rbh)
# steady-status
emissBT <- 0.97 # emissivity of the black tape
emissR <- 0.9 # emissivity of the filter paper
# steady-status
gbh_numerator_steady <- Tdry-Twet -(emissBT *5.6703E-8*((Twet+273)**4-(Tdry+273)**4)+emissR *5.6703E-8*((Twet+273)**4-(Tdry+273)**4))
gbh_denominator_steady <- 2*rho*Cs*(Twet-Tdry)+lambda*0.018*(es-ea)/(0.92*R*(Twet+273))
gbh_steady <- gbh_numerator_steady/gbh_denominator_steady # unit  m s-1
rbh_steady <- 1 / gbh_steady  # m s-1 one sided
#plot(x=time,y=gbh_steady)
mean(gbh_steady)
mean(rbh_steady)
Tair <-d$Tair.wet[6000:12000]
RH <- (d$RH.wet/100)[6000:12000]
#plot test
#plot(x=time, y= Tdry-Twet)
# Known parameters
Pa <- 101300
R <- 8.3145
E <- 0.00012 # kg m-2 s-1
#VPD
ea <- 613.65 * exp(17.502 * Tair / (240.97 + Tair)) * RH
es <- 613.65 * exp(17.502 * Twet / (240.97 + Twet))
SH <- 0.622 * ea / (Pa - ea)
Cs <- 1005 + 1820 * SH
rho <- Pa / (287.058 * (Tair+273))
lambda <- 1.91846E6 * ((Twet+273) / (Twet+273 - 33.91))**2
# wet reference from balance
gbh <- E / (0.018*(es-ea)/(0.92*R*(Twet+273))) # unit  m s-1
rbh <- 1 / gbh  # m s-1 one sided
#plot(x=time,y=gbh)
mean(gbh)
mean(rbh)
# steady-status
emissBT <- 0.97 # emissivity of the black tape
emissR <- 0.9 # emissivity of the filter paper
# steady-status
gbh_numerator_steady <- Tdry-Twet -(emissBT *5.6703E-8*((Twet+273)**4-(Tdry+273)**4)+emissR *5.6703E-8*((Twet+273)**4-(Tdry+273)**4))
gbh_denominator_steady <- 2*rho*Cs*(Twet-Tdry)+lambda*0.018*(es-ea)/(0.92*R*(Twet+273))
gbh_steady <- gbh_numerator_steady/gbh_denominator_steady # unit  m s-1
rbh_steady <- 1 / gbh_steady  # m s-1 one sided
#plot(x=time,y=gbh_steady)
mean(gbh_steady)
mean(rbh_steady)
